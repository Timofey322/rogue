#!/usr/bin/env python3
"""
üöÄ Advanced Training Runner - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
–í–∫–ª—é—á–∞–µ—Ç: Stacking, Voting, Deep Learning, ASHA/BOHB, TA-Lib, GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞
"""

import os
import sys
import time
import psutil
from datetime import datetime

from model_trainer import ModelTrainer

def check_system_resources():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    # CPU
    cpu_count = psutil.cpu_count()
    cpu_percent = psutil.cpu_percent(interval=1)
    print(f"   CPU: {cpu_count} —è–¥–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_percent:.1f}%")
    
    # –ü–∞–º—è—Ç—å
    memory = psutil.virtual_memory()
    memory_gb = memory.total / (1024**3)
    memory_available_gb = memory.available / (1024**3)
    print(f"   –ü–∞–º—è—Ç—å: {memory_gb:.1f}GB –≤—Å–µ–≥–æ, {memory_available_gb:.1f}GB –¥–æ—Å—Ç—É–ø–Ω–æ")
    
    # –î–∏—Å–∫
    disk = psutil.disk_usage('/')
    disk_gb = disk.total / (1024**3)
    disk_free_gb = disk.free / (1024**3)
    print(f"   –î–∏—Å–∫: {disk_gb:.1f}GB –≤—Å–µ–≥–æ, {disk_free_gb:.1f}GB —Å–≤–æ–±–æ–¥–Ω–æ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if memory_available_gb < 8:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 8GB")
        print("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—é")
    
    if disk_free_gb < 10:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10GB")
    
    return {
        'cpu_count': cpu_count,
        'memory_available_gb': memory_available_gb,
        'disk_free_gb': disk_free_gb
    }

def estimate_training_time(timeframe, resources):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    """
    print("‚è±Ô∏è  –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è...")
    
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    base_times = {
        '5m': 120,  # 2 —á–∞—Å–∞
        '15m': 90   # 1.5 —á–∞—Å–∞
    }
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    time_multiplier = 1.0
    
    if resources['memory_available_gb'] < 8:
        time_multiplier *= 1.5  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
    elif resources['memory_available_gb'] > 16:
        time_multiplier *= 0.7  # –ë—ã—Å—Ç—Ä–µ–µ —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –ø–∞–º—è—Ç–∏
    
    if resources['cpu_count'] < 4:
        time_multiplier *= 1.3  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —è–¥–µ—Ä
    elif resources['cpu_count'] > 8:
        time_multiplier *= 0.8  # –ë—ã—Å—Ç—Ä–µ–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —è–¥–µ—Ä
    
    estimated_time = base_times[timeframe] * time_multiplier
    
    print(f"   –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è {timeframe}: {base_times[timeframe]} –º–∏–Ω—É—Ç")
    print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {time_multiplier:.2f}x")
    print(f"   –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {estimated_time:.0f} –º–∏–Ω—É—Ç ({estimated_time/60:.1f} —á–∞—Å–æ–≤)")
    
    return estimated_time

def train_timeframe_advanced(timeframe):
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    """
    print(f"\n{'='*70}")
    print(f"üîÑ –ü–†–û–î–í–ò–ù–£–¢–û–ï –û–ë–£–ß–ï–ù–ò–ï –î–õ–Ø {timeframe.upper()} –¢–ê–ô–ú–§–†–ï–ô–ú–ê")
    print(f"{'='*70}")
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    resources = check_system_resources()
    estimated_time = estimate_training_time(timeframe, resources)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = ModelTrainer(timeframe=timeframe)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–¥–æ 2025 –≥–æ–¥–∞)
    print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df = trainer.load_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    print(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    df = trainer.create_features(df)
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    print(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π...")
    df = trainer.create_target(df)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    feature_columns = [col for col in df.columns if col not in ['timestamp', 'datetime', 'target', 'target_original']]
    X = df[feature_columns].fillna(0)
    y = df['target']
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:")
    print(f"   –ü–µ—Ä–∏–æ–¥: 2021-07-05 - 2024-12-31")
    print(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_columns)}")
    print(f"   –ü—Ä–∏–º–µ—Ä–æ–≤: {len(X)}")
    print(f"   –ö–ª–∞—Å—Å 0 (—à–æ—Ä—Ç): {(y == 0).sum()} ({(y == 0).mean()*100:.1f}%)")
    print(f"   –ö–ª–∞—Å—Å 1 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ): {(y == 1).sum()} ({(y == 1).mean()*100:.1f}%)")
    print(f"   –ö–ª–∞—Å—Å 2 (–ª–æ–Ω–≥): {(y == 2).sum()} ({(y == 2).mean()*100:.1f}%)")
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å ASHA/BOHB
    print(f"\n‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º—ã: ASHA, BOHB, Hyperband, CMA-ES")
    print(f"   –ú–æ–¥–µ–ª–∏: XGBoost, LightGBM, CatBoost, RandomForest, ExtraTrees, SVM, MLP, DeepNeuralNetwork")
    print(f"   –ê–Ω—Å–∞–º–±–ª–∏: Voting (Hard/Soft), Stacking")
    
    results, importance = trainer.time_series_cross_validation(X, y, n_splits=5)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    trainer.print_results(results)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    trainer.create_comparison_plot(results)
    
    # –û–±—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print(f"\nüéØ –û–±—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    trainer.train_final_models(X, y)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    trainer.save_results(results, importance)
    
    end_time = time.time()
    training_time = end_time - start_time
    
    print(f"\n‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {timeframe}!")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {training_time/60:.1f} –º–∏–Ω—É—Ç")
    print(f"üìà –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏: {estimated_time/60:.1f} —á–∞—Å–æ–≤")
    
    return results, importance

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üöÄ ADVANCED TRAINING RUNNER - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è")
    print("=" * 70)
    print("‚ú® –í–ö–õ–Æ–ß–ê–ï–¢:")
    print("   üîÑ –í—Ä–µ–º–µ–Ω–Ω—É—é –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é —Å ASHA/BOHB/Hyperband")
    print("   ‚ö° Optuna —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("   üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –∫–ª–∞—Å—Å–æ–≤ (SMOTE, ADASYN, BorderlineSMOTE)")
    print("   üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å TA-Lib")
    print("   üß† –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å PyTorch")
    print("   üéØ –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ (Stacking, Voting)")
    print("   üöÄ GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —É–º–Ω—É—é –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—é")
    print("   üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    os.makedirs('model_results', exist_ok=True)
    os.makedirs('model_results/models', exist_ok=True)
    os.makedirs('model_results/features', exist_ok=True)
    os.makedirs('model_results/validation', exist_ok=True)
    os.makedirs('model_results/optuna', exist_ok=True)
    os.makedirs('model_results/ensemble', exist_ok=True)
    os.makedirs('model_results/deep_learning', exist_ok=True)
    
    start_time = time.time()
    
    # –û–±—É—á–∞–µ–º –¥–ª—è 5M
    print(f"\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è 5M —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞...")
    results_5m, importance_5m = train_timeframe_advanced('5m')
    
    # –û–±—É—á–∞–µ–º –¥–ª—è 15M
    print(f"\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è 15M —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞...")
    results_15m, importance_15m = train_timeframe_advanced('15m')
    
    end_time = time.time()
    total_time = end_time - start_time
    
    print(f"\n{'='*70}")
    print(f"üéâ –ü–†–û–î–í–ò–ù–£–¢–û–ï –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"{'='*70}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç ({total_time/3600:.1f} —á–∞—Å–æ–≤)")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ model_results/")
    print(f"\nüìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"   üéØ –û–±—É—á–µ–Ω–∏–µ: 2021-07-05 - 2024-12-31 (—Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)")
    print(f"   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 2025-01-01 - 2025-07-02")
    print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ run_backtest.py")
    print(f"\nüí° –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:")
    print(f"   ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (ASHA, BOHB, Hyperband)")
    print(f"   ‚úÖ –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å PyTorch")
    print(f"   ‚úÖ –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ (Stacking, Voting)")
    print(f"   ‚úÖ TA-Lib —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    print(f"   ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤")
    print(f"   ‚úÖ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —É–º–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è")
    print(f"   ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏")
    print(f"   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 